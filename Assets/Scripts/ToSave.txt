
[Serializable]
public class PlayerScore
{
    public string date;
    public int score;
    public float time;

    public PlayerScore(string date, float time, int score)
    {
        this.date = date;
        this.time = time;
        this.score = score;
    }
}

[Serializable]
public class PlayerScoreWrapper
{
    public PlayerScore[] score_Database;

    public PlayerScoreWrapper(PlayerScore[] scores)
    {
        this.score_Database = scores;
    }
}

    void Start()
    {
        ResizeUI();
         string filePath = Path.Combine(Application.dataPath, "PlayerScores.json");

        CheckAndStorePlayerScores(filePath);
        ReadAndPrintPlayerScores(filePath);
    }

    public void CheckAndStorePlayerScores(string filePath)
    {
        // Define the file path
        

        PlayerScoreWrapper list = new PlayerScoreWrapper(
            new PlayerScore[]
            {
                new PlayerScore("Date", 10, 100),
                new PlayerScore("Date2", 11, 1000),
                new PlayerScore("Date3", 12, 10000)
            }
        );
        Debug.Log(JsonUtility.ToJson(list));

        string json_data = JsonUtility.ToJson(list);

        // Write the JSON string to the file
        File.WriteAllText(filePath, json_data);

        // Check if the file exists
        if (!File.Exists(filePath))
        {
            // Create a new (int, int) array to store in the JSON fil
            Debug.Log("PlayerScores.json created and data stored.");
        }
        else
        {
            Debug.Log("PlayerScores.json already exists.");
        }
    }

    void ReadAndPrintPlayerScores(string filePath)
    {
        // Check if the file exists
        if (File.Exists(filePath))
        {
            // Read the JSON string from the file
            string json_data = File.ReadAllText(filePath);

            // Deserialize the JSON string back to a PlayerScoreWrapper object
            PlayerScoreWrapper loadedList = JsonUtility.FromJson<PlayerScoreWrapper>(json_data);

            // Print the values
            foreach (PlayerScore score in loadedList.score_Database)
            {
                Debug.Log($"Date: {score.date}, Time: {score.time}, Score: {score.score}");
            }
        }
        else
        {
            Debug.LogError($"File not found: {filePath}");
        }
    }

